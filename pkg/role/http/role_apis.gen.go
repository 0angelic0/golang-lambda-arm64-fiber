// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package http

import (
	"fmt"
	"net/http"
	"net/url"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gofiber/fiber/v2"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all roles
	// (GET /roles)
	FindRoles(c *fiber.Ctx, params FindRolesParams) error
	// Creates a new role
	// (POST /roles)
	CreateRole(c *fiber.Ctx) error
	// Returns a role by ID
	// (GET /roles/{id})
	FindRoleByID(c *fiber.Ctx, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindRoles converts fiber context to params.
func (w *ServerInterfaceWrapper) FindRoles(c *fiber.Ctx) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindRolesParams
	// ------------- Optional query parameter "limit" -------------

	values := url.Values{}
	c.Request().URI().QueryArgs().VisitAll(func(key, value []byte) {
		values.Add(string(key), string(value))
	})

	err = runtime.BindQueryParameter("form", true, false, "limit", values, &params.Limit)
	if err != nil {
		return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", values, &params.Tags)
	if err != nil {
		return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindRoles(c, params)
	return err
}

// CreateRole converts fiber context to params.
func (w *ServerInterfaceWrapper) CreateRole(c *fiber.Ctx) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRole(c)
	return err
}

// FindRoleByID converts fiber context to params.
func (w *ServerInterfaceWrapper) FindRoleByID(c *fiber.Ctx) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindRoleByID(c, id)
	return err
}

// This is a simple interface which specifies fiber app and group addition functions which
// are present on both fiber.App and fiber.Group, since we want to allow using
// either of them for path registration
type FiberRouter interface {
	Use(args ...interface{}) fiber.Router

	Get(path string, handlers ...fiber.Handler) fiber.Router
	Head(path string, handlers ...fiber.Handler) fiber.Router
	Post(path string, handlers ...fiber.Handler) fiber.Router
	Put(path string, handlers ...fiber.Handler) fiber.Router
	Delete(path string, handlers ...fiber.Handler) fiber.Router
	Connect(path string, handlers ...fiber.Handler) fiber.Router
	Options(path string, handlers ...fiber.Handler) fiber.Router
	Trace(path string, handlers ...fiber.Handler) fiber.Router
	Patch(path string, handlers ...fiber.Handler) fiber.Router

	Add(method, path string, handlers ...fiber.Handler) fiber.Router
	Static(prefix, root string, config ...fiber.Static) fiber.Router
	All(path string, handlers ...fiber.Handler) fiber.Router

	Group(prefix string, handlers ...fiber.Handler) fiber.Router
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router FiberRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router FiberRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.Get(baseURL+"/roles", wrapper.FindRoles)
	router.Post(baseURL+"/roles", wrapper.CreateRole)
	router.Get(baseURL+"/roles/:id", wrapper.FindRoleByID)

}
